Logging
=======

Bio-Formats uses `SLF4J <http://www.slf4j.org>`_ as a logging API for 
controlling the logger system.

Logging frameworks
------------------

Two logging framework are currently supported in Bio-Formats:

- `logback <http://logback.qos.ch/>`_ is the recommended framework as it 
  natively implements the SL4J API
- `log4j <http://logging.apache.org/log4j>`_ is the other logging framework
  supported by Bio-Formats used notably in the MATLAB toolbox.

Initialization
--------------

The :javadoc:`DebugTools <loci/common/DebugTools.html>` class contains a 
series of methods for the initialization and control of the logging system. 
This class uses reflection to determine the underlying logging backend 
implementation for the logging framework detected at runtime.

The main methods are described below:

- ``DebugTools.enableLogging()`` will initialize the underlying logging 
  framework. This will result in a no-op if the logging has been initialized
  either via a binding-specific configuration file (see
  `logback configuration <http://logback.qos.ch/manual/configuration.html>`_)
  or a prior call to ``DebugTools.enableLogging()``.

- ``DebugTools.enableLogging(level)`` will initialize the logging framework
  under the same conditions as described above and set the root logger level if
  the initialization was succesful.

- ``DebugTools.setRootLevel(level)`` will override the level of the root logger
  independently of how the logging system was initialized.

- ``DebugTools.enableIJLogging()`` (logback-only) will add an ImageJ specific
  appender to the root logger.

.. versionchanged:: 5.2.0

  Prioe to Bio-Formats 5.2.0, ``DebugTools.enableLogging(level)``
  unconditionally set the logging and root logger level. Use
  ``DebugTools.setRootLevel(level)`` to restore this behavior.
