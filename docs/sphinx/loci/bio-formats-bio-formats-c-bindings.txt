Bio-Formats C++ Bindings
========================

Bio-Formats C++ Bindings
~~~~~~~~~~~~~~~~~~~~~~~~

To make Bio-Formats accessible to software written in C++, we have
created a Bio-Formats C++ interface (BF-CPP for short). It uses our
`jar2lib </software/jar2lib>`_ program to generate a C++ proxy class for
each equivalent Bio-Formats Java class. The resulting proxies are then
compiled into a library, which represents the actual interface from C++
to Bio-Formats. Using this library in your projects gives you access to
the image support of Bio-Formats.

BF-CPP comes with some standalone examples which you can use as a
starting point in your own project:

-  `showinf <http://github.com/openmicroscopy/bioformats/blob/develop/components/scifio/cppwrap/showinf.cpp>`_
-  `minimum\_writer <http://github.com/openmicroscopy/bioformats/blob/develop/components/scifio/cppwrap/minimum_writer.cpp>`_

Other projects using BF-CPP include:

-  We use BF-CPP in our `WiscScan </software/wiscscan>`_ acquisition
   program to write
   `OME-TIFF <https://www.openmicroscopy.org/site/support/file-formats/ome-tiff>`_
   files.
-  `XuvTools </bio-formats/xuvtools>`_ uses an adapted version of BF-CPP
   called
   `BlitzBioFormats <http://www.xuvtools.org/devel:libblitzbioformats>`_.

You can use BF-CPP from a pre-compiled binary, or you can generate the
code and compile it yourself:

-  Binary builds for several common platforms are available on our
   `downloads </bio-formats/downloads>`_ page.
-  See the `build
   instructions <http://github.com/openmicroscopy/bioformats/blob/develop/components/scifio/cppwrap/readme.txt>`_
   (`Windows <http://github.com/openmicroscopy/bioformats/blob/develop/components/scifio/cppwrap/readme-windows.txt>`_,
   `Mac OS
   X <http://github.com/openmicroscopy/bioformats/blob/develop/components/scifio/cppwrap/readme-macosx.txt>`_,
   `Linux <http://github.com/openmicroscopy/bioformats/blob/develop/components/scifio/cppwrap/readme-linux.txt>`_)
   for details on compiling from source.

Either way, once you have BF-CPP in compiled form, simply include it in
your project as you would any other external library.